(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-fa32ad72"],{"03fa":function(e,n,t){"use strict";t.r(n);var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"container"},[t("div",{attrs:{id:"cesiumContainer"}}),t("operation-panel",{attrs:{edit:0!=e.rectArr.length},on:{draw:e.drawStart,edit:e.editRect}})],1)},i=[],a=(t("c1ae"),t("4296"),t("eb3b"),t("e46c"),t("c508"),t("34b1"),t("a567"),t("980d"));function o(e,n){var t="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Object(a["a"])(e))||n&&e&&"number"===typeof e.length){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==t["return"]||t["return"]()}finally{if(l)throw o}}}}t("decf"),t("2afa"),t("5f01"),t("e72f");var s=t("dd8c"),l=t("9e48"),c=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"operationPanel"},[e._m(0),t("el-form",{ref:"form",attrs:{model:e.form,"label-width":"80px"}},[t("el-form-item",{attrs:{label:"颜色"}},[t("el-color-picker",{attrs:{size:"mini"},model:{value:e.form.color,callback:function(n){e.$set(e.form,"color",n)},expression:"form.color"}})],1),t("el-form-item",{attrs:{label:"动画"}},[t("el-switch",{attrs:{"active-color":"#13ce66","inactive-color":"#ff4949"},model:{value:e.form.is_animation,callback:function(n){e.$set(e.form,"is_animation",n)},expression:"form.is_animation"}})],1),t("el-form-item",{attrs:{label:"地形"}},[t("el-select",{staticClass:"value",attrs:{size:"mini",placeholder:"请选择地形"},model:{value:e.form.terrainValue,callback:function(n){e.$set(e.form,"terrainValue",n)},expression:"form.terrainValue"}},e._l(e.terrain,(function(e){return t("el-option",{key:e.value,attrs:{label:e.label,value:e.value}})})),1)],1),t("el-form-item",{attrs:{label:"文字"}},[t("el-input",{staticClass:"value",attrs:{size:"mini",placeholder:"请输入要创建的文字",clearable:""},model:{value:e.form.text,callback:function(n){e.$set(e.form,"text",n)},expression:"form.text"}})],1),t("el-form-item",[t("el-button",{attrs:{type:"primary"},on:{click:e.drawStart}},[e._v("绘制")]),e.edit?t("el-button",{attrs:{type:"warning"},on:{click:e.editRect}},[e._v("编辑")]):e._e()],1)],1)],1)},u=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"tip-view"},[t("div",{staticClass:"tip-item"},[t("div",{staticClass:"tip-title"},[e._v("绘制：")]),t("div",{staticClass:"tip-step"},[e._v(" 输入文字=》点击绘制按钮 开始绘制 =》按住鼠标左键拖动=》抬起鼠标左键结束绘制 ")])]),t("div",{staticClass:"tip-item"},[t("div",{staticClass:"tip-title"},[e._v("编辑：")]),t("div",{staticClass:"tip-step"},[e._v(" 点击编辑按钮=》选中要编辑的图形 =》拖动点位=》鼠标右键结束编辑 ")])])])}],h={props:{edit:{type:Boolean,default:function(){return!1}}},data:function(){return{terrain:[{label:"位置绝对",value:"NONE"},{label:"位置固定在地形上",value:"CLAMP_TO_GROUND"},{label:"位置高度是指地形上方的高度",value:"RELATIVE_TO_GROUND"}],form:{fontSize:100,color:"#409EFF",is_animation:!1,terrainValue:"CLAMP_TO_GROUND",text:"到此一游"}}},methods:{drawStart:function(){""!=this.form.fontColor?""!=this.form.text?this.$emit("draw",this.form):this.$notify({title:"警告",message:"请输入要创建的文字",type:"warning"}):this.$notify({title:"警告",message:"请选择颜色",type:"warning"})},editRect:function(){this.$emit("edit")}}},p=h,d=(t("fe41"),t("cba8")),g=Object(d["a"])(p,c,u,!1,null,"79445f80",null),f=g.exports,m=[{codeLanguage:"VUE",relyOn:[{label:"Canvas.js",url:"cesium/Canvas.js"},{label:"Entity.js",url:"cesium/Entity.js"},{label:"operationPanel.vue",url:"Vue/Entity/textMap/rectangle/operationPanel.vue"}],code:[{codeLanguage:"html",content:'<div class="container">\n                    <div id="cesiumContainer"></div>\n                    <operation-panel\n                      @draw="drawStart"\n                      @edit="editRect"\n                      :edit="rectArr.length != 0"\n                    />\n                  </div>'},{codeLanguage:"js",content:'import Canvas from "@/common/cesium/Canvas";\n                  import Entity from "@/common/cesium/Entity";\n                  import operationPanel from "./module/operationPanel.vue";\n                  export default {\n                    name: "textMapRectangle",\n                    components: { operationPanel },\n                    data() {\n                      return {\n                        viewer: null,\n                        _Entity: null,\n                        handler: null,\n                        _Canvas: null,\n                        cesiumContainer: null,\n                  \n                        rect: null, //当前绘制矩形实体\n                        startPoint: null, //初始点位\n                        rectArr: [], //绘制矩形实体列表\n                  \n                        //当前编辑事件\n                        gon: null,\n                        //编辑点集合\n                        pointsId: [],\n                        //中心点\n                        centerPoint: null,\n                        //当前编辑点\n                        currentPoint: null,\n                      };\n                    },\n                    mounted() {\n                      this.init();\n                    },\n                    methods: {\n                      init() {\n                        const Cesium = this.cesium;\n                        Cesium.Ion.defaultAccessToken = process.env.VUE_APP_TOKEN;\n                        this.viewer = new Cesium.Viewer("cesiumContainer", {\n                          imageryProvider: new Cesium.ArcGisMapServerImageryProvider({\n                            url: "https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer",\n                          }),\n                          terrainProvider: new Cesium.CesiumTerrainProvider({\n                            //加载火星在线地形\n                            url: "http://data.marsgis.cn/terrain",\n                          }),\n                          shouldAnimate: true,\n                          infoBox: false,\n                          selectionIndicator: false,\n                        });\n                        //设置贴地效果\n                        this.viewer.scene.globe.depthTestAgainstTerrain = false;\n                        this._Entity = new Entity(Cesium, this.viewer);\n                        this._Canvas = new Canvas(Cesium, this.viewer);\n                        this.cesiumContainer = document.getElementById("cesiumContainer");\n                        //相机\n                        this.viewer.camera.flyTo({\n                          //setView是直接跳到 flyTo// 是镜头飞行到  网速不好或者电脑配置不高 还是不要fly了吧\n                          destination: Cesium.Cartesian3.fromDegrees(\n                            -75.59742934002912,\n                            40.03824624260394,\n                            5000\n                          ), //经纬度坐标转换为 笛卡尔坐标(世界坐标)\n                          orientation: {\n                            heading: Cesium.Math.toRadians(0.0), // east, default value is 0.0 (north) //东西南北朝向\n                            pitch: Cesium.Math.toRadians(-90), // default value (looking down)  //俯视仰视视觉\n                            roll: 0.0, // default value\n                          },\n                          duration: 3, //3秒到达战场\n                        });\n                      },\n                      /**\n                       * 开始绘制\n                       */\n                      drawStart(data) {\n                        //解构数据\n                        const { color, fontSize, is_animation, terrainValue, text } = data;\n                        const Cesium = this.cesium;\n                        this.handler = new Cesium.ScreenSpaceEventHandler(\n                          this.viewer.scene.canvas\n                        );\n                        //鼠标变成加号\n                        this.cesiumContainer.style.cursor = "crosshair";\n                        this.rect = null;\n                        //进制地图移动\n                        this.viewer.scene.screenSpaceCameraController.enableRotate = false;\n                        this.viewer.scene.screenSpaceCameraController.enableZoom = false;\n                  \n                        //鼠标点击落下事件 Start\n                        this.handler.setInputAction((event) => {\n                          //获取加载地形后对应的经纬度和高程：地标坐标\n                          const ray = this.viewer.camera.getPickRay(event.position);\n                          const cartesian = this.viewer.scene.globe.pick(ray, this.viewer.scene);\n                          if (!Cesium.defined(cartesian)) {\n                            return;\n                          }\n                  \n                          //绘制初始点位\n                          this.startPoint = this._Entity.createPoint({\n                            position: cartesian,\n                            color: Cesium.Color.CHARTREUSE.withAlpha(1),\n                            pixelSize: 10,\n                            heightReference: Cesium.HeightReference[this.terrainValue],\n                            outlineColor: Cesium.Color.WHITE,\n                            outlineWidth: 1,\n                          });\n                  \n                          //绘制矩形\n                          this.rect = this._Entity.createRectangle({\n                            coordinates: Cesium.Rectangle.fromCartesianArray([\n                              cartesian,\n                              cartesian,\n                            ]),\n                            material: Cesium.Color.GREENYELLOW.withAlpha(0.5),\n                            outline: true,\n                            outlineColor: Cesium.Color.WHITE,\n                            outlineWidth: 3,\n                            heightReference: Cesium.HeightReference[this.terrainValue],\n                          });\n                        }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                        //鼠标点击落下事件 End\n                  \n                        // 对鼠标移动事件的监听 Start\n                        this.handler.setInputAction((event) => {\n                          //判断已经存在初始位置\n                          if (this.startPoint == null || this.rect == null) {\n                            return;\n                          }\n                  \n                          //获取加载地形后对应的经纬度和高程：地标坐标\n                          const ray = this.viewer.camera.getPickRay(event.endPosition);\n                          const cartesian = this.viewer.scene.globe.pick(ray, this.viewer.scene);\n                          if (!cartesian) {\n                            return;\n                          }\n                  \n                          //在固定的帧中在指定的时间获取属性的值。\n                          const startCartesian = this.startPoint.position.getValue(\n                            Cesium.JulianDate.now()\n                          );\n                  \n                          this.rect.rectangle.coordinates = new Cesium.CallbackProperty(\n                            (time, result) => {\n                              return Cesium.Rectangle.fromCartesianArray([\n                                startCartesian,\n                                cartesian,\n                              ]);\n                            },\n                            false\n                          );\n                        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                        // 对鼠标移动事件的监听 End\n                  \n                        // 对鼠标抬起事件的监听(结束点采集) Start\n                        this.handler.setInputAction((event) => {\n                          //鼠标变成默认\n                          this.cesiumContainer.style.cursor = "default";\n                          //恢复试图缩放功能\n                          this.viewer.scene.screenSpaceCameraController.enableRotate = true;\n                          this.viewer.scene.screenSpaceCameraController.enableZoom = true;\n                          //移除点位\n                          this.viewer.entities.remove(this.startPoint);\n                          //移除地图鼠标点击事件\n                          this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                          //移除地图鼠标移动事件\n                          this.handler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                          //移除地图鼠标抬起事件\n                          this.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_UP);\n                          //赋值材质\n                          this.rect.rectangle.outline = false;\n                          const image = this._Canvas.drawText({\n                            text,\n                            color,\n                            fontSize,\n                          });\n                          this.rect.rectangle.material = new Cesium.ImageMaterialProperty({\n                            //image 定要使用的图像，URL，画布或视频的属性。\n                            image,\n                            repeat: new Cesium.Cartesian2(1, 1), //获取或设置 Cartesian2 属性，该属性指定图像在每个方向上重复的次数。\n                            transparent: true, //图像是否具有透明度\n                            color: Cesium.Color.WHITE, //图像的所需颜色。\n                          });\n                          // 动画 start\n                          if (is_animation) {\n                            //如果应对广告牌，折线，标签等图元进行深度测试，则为true抵靠地形表面 否则反之\n                            this.viewer.scene.globe.depthTestAgainstTerrain = false;\n                            let rotation = Cesium.Math.toRadians(30);\n                            function getRotationValue() {\n                              return (rotation += 0.005);\n                            }\n                            this.rect.rectangle.rotation = new Cesium.CallbackProperty(\n                              getRotationValue,\n                              false\n                            );\n                            this.rect.rectangle.stRotation = new Cesium.CallbackProperty(\n                              getRotationValue,\n                              false\n                            );\n                          }\n                          // 动画 end\n                  \n                          //数据赋值\n                          this.rectArr.push(this.rect);\n                  \n                          let dke = this.rect.rectangle.coordinates.getValue();\n                          console.log("修改后的面坐标(笛卡尔)：", dke);\n                          let east = Cesium.Math.toDegrees(dke.east);\n                          let west = Cesium.Math.toDegrees(dke.west);\n                          let north = Cesium.Math.toDegrees(dke.north);\n                          let south = Cesium.Math.toDegrees(dke.south);\n                          console.log("矩形西南东北坐标:", west, south, east, north);\n                        }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                        // 对鼠标抬起事件的监听(结束点采集) End\n                      },\n                      /**\n                       * 编辑\n                       */\n                      editRect() {\n                        const Cesium = this.cesium;\n                        //是否进入编辑\n                        let isEditting = false;\n                        this.cesiumContainer.style.cursor = "pointer";\n                        //去掉双击事件\n                        this.viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(\n                          Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n                        );\n                        //鼠标左键点击 Start\n                        this.handler.setInputAction((event) => {\n                          const windowPosition = event.position;\n                          const pickedObject = this.viewer.scene.pick(windowPosition);\n                          if (Cesium.defined(pickedObject)) {\n                            const entity = pickedObject.id;\n                            const rectArr = this.rectArr.filter((item) => item.id == entity.id);\n                            if (rectArr.length != 0 && !isEditting) {\n                              this.gon = entity;\n                              // 生成边界编辑点\n                              const degrees = this.gon.rectangle.coordinates.getValue();\n                              let cartesianArr = [];\n                  \n                              let westNorth = Cesium.Cartesian3.fromRadians(\n                                degrees.west,\n                                degrees.north\n                              );\n                              westNorth.flag = "westNorth";\n                              cartesianArr.push(westNorth);\n                  \n                              let eastNorth = Cesium.Cartesian3.fromRadians(\n                                degrees.east,\n                                degrees.north\n                              );\n                              eastNorth.flag = "eastNorth";\n                              cartesianArr.push(eastNorth);\n                  \n                              let eastSouth = Cesium.Cartesian3.fromRadians(\n                                degrees.east,\n                                degrees.south\n                              );\n                              eastSouth.flag = "eastSouth";\n                              cartesianArr.push(eastSouth);\n                  \n                              let westSouth = Cesium.Cartesian3.fromRadians(\n                                degrees.west,\n                                degrees.south\n                              );\n                              westSouth.flag = "westSouth";\n                              cartesianArr.push(westSouth);\n                              // console.log("cartesianArr", cartesianArr);\n                              cartesianArr.map((item, index) => {\n                                let point = this._Entity.createPoint({\n                                  id: \'Point-\'+ new Date().getTime() +\'-index-\'+index,\n                                  name: "rect_point",\n                                  position: item,\n                                  color: Cesium.Color.CHARTREUSE.withAlpha(1),\n                                  pixelSize: 10,\n                                  heightReference: Cesium.HeightReference.CLAMP_TO_GROUND, //贴地\n                                  outlineColor: Cesium.Color.WHITE,\n                                  outlineWidth: 1,\n                                });\n                                point.flag = item.flag;\n                                this.pointsId.push(point.id);\n                              });\n                              // 生成中心编辑点\n                              const centerLng = (degrees.west + degrees.east) / 2;\n                              const centerLat = (degrees.north + degrees.south) / 2;\n                              const rect_center_cartesian = Cesium.Cartesian3.fromRadians(\n                                centerLng,\n                                centerLat\n                              );\n                              let centerPoint = this._Entity.createPoint({\n                                id: \'centerPoint-\'+ new Date().getTime()\',\n                                name: "rect_point",\n                                position: rect_center_cartesian,\n                                color: Cesium.Color.RED,\n                                pixelSize: 10,\n                                outlineColor: Cesium.Color.BLACK,\n                                outlineWidth: 1,\n                                heightReference: Cesium.HeightReference.CLAMP_TO_GROUND, //贴地\n                              });\n                              centerPoint.flag = "centerPoint";\n                              this.pointsId.push(centerPoint.id);\n                  \n                              isEditting = true;\n                              this.viewer.scene.screenSpaceCameraController.enableRotate = false;\n                              this.viewer.scene.screenSpaceCameraController.enableZoom = false;\n                            } else if (entity.name === "rect_point") {\n                              this.currentPoint = entity;\n                            }\n                          }\n                        }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                        //鼠标左键点击 End\n                  \n                        // 对鼠标移动事件的监听 Start\n                        this.handler.setInputAction((event) => {\n                          if (\n                            isEditting &&\n                            this.currentPoint &&\n                            this.currentPoint.name == "rect_point"\n                          ) {\n                            //获取加载地形后对应的经纬度和高程：地标坐标\n                            const ray = this.viewer.camera.getPickRay(event.endPosition);\n                            const cartesian = this.viewer.scene.globe.pick(\n                              ray,\n                              this.viewer.scene\n                            );\n                            let points = [];\n                            if (!cartesian) {\n                              return;\n                            }\n                            //更新当前点的位置\n                            this.currentPoint.position = cartesian;\n                            for (var i = 0; i < this.pointsId.length; i++) {\n                              if (this.currentPoint.id == this.pointsId[i]) {\n                                var objTemp = this.currentPoint.position._value;\n                                objTemp.flag = this.currentPoint.flag;\n                                points.push(objTemp);\n                              } else {\n                                var id = this.pointsId[i];\n                                var objTemp = this.viewer.entities.getById(id).position._value;\n                                objTemp.flag = this.viewer.entities.getById(id).flag;\n                                points.push(objTemp);\n                              }\n                            }\n                            if (typeof this.currentPoint == "undefined") {\n                              var radians = Cesium.Rectangle.fromDegrees(\n                                west,\n                                south,\n                                east,\n                                north\n                              );\n                              return radians;\n                            }\n                  \n                            //当前移动是哪个点，获取新的矩形边界\n                            const ellipsoid = this.viewer.scene.globe.ellipsoid;\n                            let lngArr = [];\n                            let latArr = [];\n                            if (\n                              this.currentPoint.flag == "westNorth" ||\n                              this.currentPoint.flag == "eastSouth"\n                            ) {\n                              for (let i = 0; i < points.length; i++) {\n                                if (\n                                  points[i].flag == "westNorth" ||\n                                  points[i].flag == "eastSouth"\n                                ) {\n                                  const cartographic = ellipsoid.cartesianToCartographic(\n                                    points[i]\n                                  );\n                                  const lng = Cesium.Math.toDegrees(cartographic.longitude);\n                                  const lat = Cesium.Math.toDegrees(cartographic.latitude);\n                                  lngArr.push(lng);\n                                  latArr.push(lat);\n                                }\n                              }\n                            } else if (\n                              this.currentPoint.flag == "eastNorth" ||\n                              this.currentPoint.flag == "westSouth"\n                            ) {\n                              for (var i = 0; i < points.length; i++) {\n                                if (\n                                  points[i].flag == "eastNorth" ||\n                                  points[i].flag == "westSouth"\n                                ) {\n                                  const cartographic = ellipsoid.cartesianToCartographic(\n                                    points[i]\n                                  );\n                                  const lng = Cesium.Math.toDegrees(cartographic.longitude);\n                                  const lat = Cesium.Math.toDegrees(cartographic.latitude);\n                                  lngArr.push(lng);\n                                  latArr.push(lat);\n                                }\n                              }\n                            } else if (this.currentPoint.flag == "centerPoint") {\n                              const cartographic = ellipsoid.cartesianToCartographic(\n                                this.currentPoint.position._value\n                              );\n                              const centerLng = Cesium.Math.toDegrees(cartographic.longitude);\n                              const centerLat = Cesium.Math.toDegrees(cartographic.latitude);\n                              //console.log("centerLng",centerLng);\n                              const rectInfo = this.gon.rectangle.coordinates.getValue();\n                              //console.log("currentPoint.position",currentPoint.position._value);\n                              const rectWidth =\n                                Cesium.Math.toDegrees(rectInfo.east) -\n                                Cesium.Math.toDegrees(rectInfo.west);\n                              const rectHeight =\n                                Cesium.Math.toDegrees(rectInfo.north) -\n                                Cesium.Math.toDegrees(rectInfo.south);\n                              //console.log("rectWidth:",rectWidth);\n                              const rectInfoEast = centerLng + rectWidth / 2;\n                              lngArr.push(rectInfoEast);\n                              const rectInfoWest = centerLng - rectWidth / 2;\n                              lngArr.push(rectInfoWest);\n                              const rectInfoNorth = centerLat + rectHeight / 2;\n                              latArr.push(rectInfoNorth);\n                              const rectInfoSouth = centerLat - rectHeight / 2;\n                              latArr.push(rectInfoSouth);\n                              //console.log("rectInfoEast",rectInfoEast);\n                              //console.log("经度组：",lngArr);\n                            }\n                  \n                            const east = Math.max.apply(null, lngArr);\n                            const west = Math.min.apply(null, lngArr);\n                            const north = Math.max.apply(null, latArr);\n                            const south = Math.min.apply(null, latArr);\n                            //更新所有编辑点的位置\n                            for (let i = 0; i < this.pointsId.length; i++) {\n                              let id = this.pointsId[i];\n                              let entityTemp = this.viewer.entities.getById(id);\n                              if (\n                                typeof entityTemp != "undefined" &&\n                                typeof this.currentPoint != "undefined"\n                              ) {\n                                if (entityTemp.flag != this.currentPoint.flag) {\n                                  if (entityTemp.flag == "westNorth") {\n                                    entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                      west,\n                                      north\n                                    );\n                                  } else if (entityTemp.flag == "eastNorth") {\n                                    entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                      east,\n                                      north\n                                    );\n                                  } else if (entityTemp.flag == "eastSouth") {\n                                    entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                      east,\n                                      south\n                                    );\n                                  } else if (entityTemp.flag == "westSouth") {\n                                    entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                      west,\n                                      south\n                                    );\n                                  } else if (entityTemp.flag == "centerPoint") {\n                                    var centerLng = (west + east) / 2;\n                                    var centerLat = (north + south) / 2;\n                                    entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                      centerLng,\n                                      centerLat\n                                    );\n                                  }\n                                }\n                              }\n                            }\n                  \n                            //console.log("坐标：",west, south, east, north);\n                            if (west >= east || south >= north) {\n                              this.currentPoint = undefined;\n                              return;\n                            }\n                  \n                            var radians = Cesium.Rectangle.fromDegrees(west, south, east, north);\n                            //更新矩形位置\n                            this.gon.rectangle.coordinates = new Cesium.CallbackProperty(\n                              function (time, result) {\n                                return radians;\n                              },\n                              false\n                            );\n                          }\n                        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                        // 对鼠标移动事件的监听 End\n                  \n                        // 对鼠标抬起事件的监听 Start\n                        this.handler.setInputAction((event) => {\n                          // isEditting = false;\n                          this.currentPoint = undefined;\n                        }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                        // 对鼠标抬起事件的监听 End\n                  \n                        //鼠标右键点击 Start\n                        this.handler.setInputAction((event) => {\n                          this.viewer.scene.screenSpaceCameraController.enableRotate = true;\n                          this.viewer.scene.screenSpaceCameraController.enableZoom = true;\n                          // if (this.handler !== null && !this.handler.isDestroyed()) {\n                          //   this.handler.destroy();\n                          // }\n                          for (let id of this.pointsId) {\n                            this.viewer.entities.removeById(id);\n                          }\n                          this.pointsId = [];\n                          this.centerPoint = null;\n                          this.currentPoint = null;\n                  \n                          var dke = this.gon.rectangle.coordinates.getValue();\n                          console.log("修改后的面坐标(笛卡尔)：", dke);\n                  \n                          var east = Cesium.Math.toDegrees(dke.east);\n                          var west = Cesium.Math.toDegrees(dke.west);\n                          var north = Cesium.Math.toDegrees(dke.north);\n                          var south = Cesium.Math.toDegrees(dke.south);\n                          console.log("矩形西南东北坐标:", west, south, east, north);\n                  \n                          this.gon = null;\n                          //鼠标变成默认\n                          this.cesiumContainer.style.cursor = "default";\n                        }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n                        //鼠标右键点击 End\n                      },\n                    },\n                  };'},{codeLanguage:"css",content:".container {\n                    width: 100%;\n                    height: 100%;\n                    #cesiumContainer {\n                      width: 100%;\n                      height: 100%;\n                    }\n                  }"}]},{codeLanguage:"JS",relyOn:[{label:"Utils.js",url:"JavaScript/cesium/Utils.js"},{label:"Entity.js",url:"JavaScript/cesium/Entity.js"},{label:"openTextMapCreateElement.js",url:"JavaScript/Html/htmlPopup/rectangle/openTextMapCreateElement.js"}],code:[{codeLanguage:"js",content:'\n                  //贴图变量\n                  var textMapvariable = {\n                      rect: null,\n                      canvasDom: null,\n                      handler: null,\n                      _Entity: null,\n                      startPoint: null,\n                      rectArr: [],\n                      //当前编辑事件\n                      gon: null,\n                      //编辑点集合\n                      pointsId: [],\n                      //中心点\n                      centerPoint: null,\n                      //当前编辑点\n                      currentPoint: null,\n                  }\n        \n                  //添加操作面板\n                  function openTextMap() {\n                      const _Utils = new Utils()\n                      _Utils.operationDom(\'append\', \'MainCenter\', openTextMapCreateElement(\'textMap-\'+new Date().getTime()))\n\n\n                      //设置贴地效果\n                      viewer.scene.globe.depthTestAgainstTerrain = false;\n                      //创建事件载体\n                      textMapvariable.handler = new Cesium.ScreenSpaceEventHandler(\n                          viewer.scene.canvas\n                      );\n                      textMapvariable._Entity = new Entity(Cesium, viewer)\n                      textMapvariable.canvasDom = document.getElementById(\'sceneView\')\n\n                      //相机(定位到了 沈河区惠工广场)\n                      viewer.camera.flyTo({\n                          //setView是直接跳到 flyTo// 是镜头飞行到  网速不好或者电脑配置不高 还是不要fly了吧\n                          destination: Cesium.Cartesian3.fromDegrees(\n                              123.4338589341694,\n                              41.811889939097895,\n                              2000\n                          ), //经纬度坐标转换为 笛卡尔坐标(世界坐标)\n                          orientation: {\n                              heading: Cesium.Math.toRadians(0.0), // east, default value is 0.0 (north) //东西南北朝向\n                              pitch: Cesium.Math.toRadians(-90), // default value (looking down)  //俯视仰视视觉\n                              roll: 0.0, // default value\n                          },\n                          duration: 3, //3秒到达战场\n                      });\n                  }\n                  //启动 先添加操作面板 剩余操作全部都在操作面板上执行操作\n                  openTextMap()\n\n\n                  /**\n                   * 开始绘制\n                   */\n                  function TextMapDrawStart() {\n                      const formData = {\n                          fontSize: 200,\n                          color: document.getElementById("textMap-color").value,\n                          is_animation: document.getElementById("textMap-switch").checked,\n                          terrainValue: document.getElementById("textMap-select").value,\n                          text: document.getElementById("textMap-text").value,\n                      }\n                      if (formData.color == "") {\n                          layer.msg(\'请选择颜色\', { icon: 5 });\n                          return\n                      }\n                      if (formData.terrainValue == "") {\n                          layer.msg(\'请选择地形\', { icon: 5 });\n                          return\n                      }\n                      if (formData.text == "") {\n                          layer.msg(\'请输入文字\', { icon: 5 });\n                          return\n                      }\n\n                      textMapvariable.rect = null;\n\n                      //鼠标变成加号\n                      textMapvariable.canvasDom.style.cursor = "crosshair";\n                      //进制地图移动\n                      viewer.scene.screenSpaceCameraController.enableRotate = false;\n                      viewer.scene.screenSpaceCameraController.enableZoom = false;\n\n                      //鼠标点击事件 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          //获取加载地形后对应的经纬度和高程：地标坐标\n                          var ray = viewer.camera.getPickRay(event.position);\n                          var cartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                          // console.log("cartesian:", cartesian);\n                          if (!Cesium.defined(cartesian)) {\n                              return;\n                          }\n\n                          //绘制初始点位\n                          textMapvariable.startPoint = textMapvariable._Entity.createPoint({\n                              position: cartesian,\n                              color: Cesium.Color.CHARTREUSE.withAlpha(1),\n                              pixelSize: 10,\n                              heightReference: Cesium.HeightReference[formData.terrainValue],\n                              outlineColor: Cesium.Color.WHITE,\n                              outlineWidth: 1,\n                          });\n\n                          //绘制矩形\n                          textMapvariable.rect = textMapvariable._Entity.createRectangle({\n                              coordinates: Cesium.Rectangle.fromCartesianArray([\n                                  cartesian,\n                                  cartesian,\n                              ]),\n                              material: Cesium.Color.GREENYELLOW.withAlpha(0.5),\n                              outline: true,\n                              outlineColor: Cesium.Color.WHITE,\n                              outlineWidth: 3,\n                              heightReference: Cesium.HeightReference[formData.terrainValue],\n                          });\n                      }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                      //鼠标点击事件 End\n\n                      // 对鼠标移动事件的监听 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          //判断已经存在初始位置\n                          if (textMapvariable.startPoint == null || textMapvariable.rect == null) {\n                              return;\n                          }\n\n                          //获取加载地形后对应的经纬度和高程：地标坐标\n                          var ray = viewer.camera.getPickRay(event.endPosition);\n                          var cartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                          if (!cartesian) {\n                              return;\n                          }\n\n                          //在固定的帧中在指定的时间获取属性的值。\n                          var startCartesian = textMapvariable.startPoint.position.getValue(\n                              Cesium.JulianDate.now()\n                          );\n\n                          textMapvariable.rect.rectangle.coordinates = new Cesium.CallbackProperty(\n                              (time, result) => {\n                                  return Cesium.Rectangle.fromCartesianArray([\n                                      startCartesian,\n                                      cartesian,\n                                  ]);\n                              },\n                              false\n                          );\n                      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                      // 对鼠标移动事件的监听 End\n\n                      // 对鼠标抬起事件的监听(结束点采集) Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          //鼠标变成默认\n                          textMapvariable.canvasDom.style.cursor = "default";\n                          //恢复试图缩放功能\n                          viewer.scene.screenSpaceCameraController.enableRotate = true;\n                          viewer.scene.screenSpaceCameraController.enableZoom = true;\n                          //移除点位\n                          viewer.entities.remove(textMapvariable.startPoint);\n                          //移除地图鼠标点击事件\n                          textMapvariable.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                          //移除地图鼠标移动事件\n                          textMapvariable.handler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                          //移除地图鼠标抬起事件\n                          textMapvariable.handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_UP);\n\n                          //赋值材质\n                          textMapvariable.rect.rectangle.outline = false;\n                          const _Canvas = new Canvas(Cesium, viewer);\n                          const image = _Canvas.drawText({\n                              text: formData.text,\n                              color: formData.color,\n                              fontSize: formData.fontSize,\n                          });\n\n                          textMapvariable.rect.rectangle.material = new Cesium.ImageMaterialProperty({\n                              //image 定要使用的图像，URL，画布或视频的属性。\n                              image,\n                              repeat: new Cesium.Cartesian2(1, 1), //获取或设置 Cartesian2 属性，该属性指定图像在每个方向上重复的次数。\n                              transparent: true, //图像是否具有透明度\n                              color: Cesium.Color.WHITE, //图像的所需颜色。\n                          });\n\n                          // 动画 start\n                          if (formData.is_animation) {\n                              //如果应对广告牌，折线，标签等图元进行深度测试，则为true抵靠地形表面 否则反之\n                              viewer.scene.globe.depthTestAgainstTerrain = false;\n                              let rotation = Cesium.Math.toRadians(30);\n                              function getRotationValue() {\n                                  return (rotation += 0.005);\n                              }\n                              textMapvariable.rect.rectangle.rotation = new Cesium.CallbackProperty(\n                                  getRotationValue,\n                                  false\n                              );\n                              textMapvariable.rect.rectangle.stRotation = new Cesium.CallbackProperty(\n                                  getRotationValue,\n                                  false\n                              );\n                          }\n                          // 动画 end\n\n                          //数据赋值\n                          textMapvariable.rectArr.push(textMapvariable.rect);\n\n                          var dke = textMapvariable.rect.rectangle.coordinates.getValue();\n                          console.log("修改后的面坐标(笛卡尔)：", dke);\n                          var east = Cesium.Math.toDegrees(dke.east);\n                          var west = Cesium.Math.toDegrees(dke.west);\n                          var north = Cesium.Math.toDegrees(dke.north);\n                          var south = Cesium.Math.toDegrees(dke.south);\n                          console.log("矩形西南东北坐标:", west, south, east, north);\n                      }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                      // 对鼠标抬起事件的监听(结束点采集) End\n                  }\n\n\n                  /**\n                   * 编辑矩形\n                   */\n                  function TextMapDrawEdit() {\n                      if (textMapvariable.rectArr.length == 0) {\n                          layer.msg(\'好像并没有绘制的矩形哦，先去画一个吧\', { icon: 5 });\n                          return\n                      }\n                      //是否进入编辑\n                      var isEditting = false;\n                      textMapvariable.canvasDom.style.cursor = "pointer";\n                      //去掉双击事件\n                      viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(\n                          Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n                      );\n\n                      //鼠标点击事件 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          const windowPosition = event.position;\n                          const pickedObject = viewer.scene.pick(windowPosition);\n                          // console.log(pickedObject);\n                          if (Cesium.defined(pickedObject)) {\n                              const entity = pickedObject.id;\n                              // console.log(entity)\n                              const rectArr = textMapvariable.rectArr.filter((item) => item.id == entity.id);\n                              if (rectArr.length != 0 && !isEditting) {\n                                  textMapvariable.gon = entity;\n                                  // 生成边界编辑点\n                                  const degrees = textMapvariable.gon.rectangle.coordinates.getValue();\n                                  let cartesianArr = [];\n\n                                  let westNorth = Cesium.Cartesian3.fromRadians(\n                                      degrees.west,\n                                      degrees.north\n                                  );\n                                  westNorth.flag = "westNorth";\n                                  cartesianArr.push(westNorth);\n\n                                  let eastNorth = Cesium.Cartesian3.fromRadians(\n                                      degrees.east,\n                                      degrees.north\n                                  );\n                                  eastNorth.flag = "eastNorth";\n                                  cartesianArr.push(eastNorth);\n\n                                  let eastSouth = Cesium.Cartesian3.fromRadians(\n                                      degrees.east,\n                                      degrees.south\n                                  );\n                                  eastSouth.flag = "eastSouth";\n                                  cartesianArr.push(eastSouth);\n\n                                  let westSouth = Cesium.Cartesian3.fromRadians(\n                                      degrees.west,\n                                      degrees.south\n                                  );\n                                  westSouth.flag = "westSouth";\n                                  cartesianArr.push(westSouth);\n                                  // console.log("cartesianArr", cartesianArr);\n                                  cartesianArr.map((item, index) => {\n                                      let point = textMapvariable._Entity.createPoint({\n                                          id: \'Point-\' + new Date().getTime() + \'-index-\' + index,\n                                          name: "rect_point",\n                                          position: item,\n                                          color: Cesium.Color.CHARTREUSE.withAlpha(1),\n                                          pixelSize: 10,\n                                          heightReference: Cesium.HeightReference.CLAMP_TO_GROUND, //贴地\n                                          outlineColor: Cesium.Color.WHITE,\n                                          outlineWidth: 1,\n                                      });\n                                      point.flag = item.flag;\n                                      textMapvariable.pointsId.push(point.id);\n                                  });\n                                  // 生成中心编辑点\n                                  const centerLng = (degrees.west + degrees.east) / 2;\n                                  const centerLat = (degrees.north + degrees.south) / 2;\n                                  const rect_center_cartesian = Cesium.Cartesian3.fromRadians(\n                                      centerLng,\n                                      centerLat\n                                  );\n                                  let centerPoint = textMapvariable._Entity.createPoint({\n                                      id: \'centerPoint-\' + new Date().getTime(),\n                                      name: "rect_point",\n                                      position: rect_center_cartesian,\n                                      color: Cesium.Color.RED,\n                                      pixelSize: 10,\n                                      outlineColor: Cesium.Color.BLACK,\n                                      outlineWidth: 1,\n                                      heightReference: Cesium.HeightReference.CLAMP_TO_GROUND, //贴地\n                                  });\n                                  centerPoint.flag = "centerPoint";\n                                  textMapvariable.pointsId.push(centerPoint.id);\n\n                                  isEditting = true;\n                                  viewer.scene.screenSpaceCameraController.enableRotate = false;\n                                  viewer.scene.screenSpaceCameraController.enableZoom = false;\n                              } else if (entity.name === "rect_point") {\n                                  textMapvariable.currentPoint = entity;\n                              }\n                          }\n                      }, Cesium.ScreenSpaceEventType.LEFT_DOWN);\n                      //鼠标点击事件 End\n\n                      // 对鼠标移动事件的监听 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          if (\n                              isEditting &&\n                              textMapvariable.currentPoint &&\n                              textMapvariable.currentPoint.name == "rect_point"\n                          ) {\n                              //获取加载地形后对应的经纬度和高程：地标坐标\n                              const ray = viewer.camera.getPickRay(event.endPosition);\n                              const cartesian = viewer.scene.globe.pick(ray, viewer.scene);\n                              let points = [];\n                              if (!cartesian) {\n                                  return;\n                              }\n                              //更新当前点的位置\n                              textMapvariable.currentPoint.position = cartesian;\n                              for (var i = 0; i < textMapvariable.pointsId.length; i++) {\n                                  if (textMapvariable.currentPoint.id == textMapvariable.pointsId[i]) {\n                                      var objTemp = textMapvariable.currentPoint.position._value;\n                                      objTemp.flag = textMapvariable.currentPoint.flag;\n                                      points.push(objTemp);\n                                  } else {\n                                      var id = textMapvariable.pointsId[i];\n                                      var objTemp = viewer.entities.getById(id).position._value;\n                                      objTemp.flag = viewer.entities.getById(id).flag;\n                                      points.push(objTemp);\n                                  }\n                              }\n                              if (typeof textMapvariable.currentPoint == "undefined") {\n                                  var radians = Cesium.Rectangle.fromDegrees(\n                                      west,\n                                      south,\n                                      east,\n                                      north\n                                  );\n                                  return radians;\n                              }\n\n                              //当前移动是哪个点，获取新的矩形边界\n                              const ellipsoid = viewer.scene.globe.ellipsoid;\n                              let lngArr = [];\n                              let latArr = [];\n                              if (\n                                  textMapvariable.currentPoint.flag == "westNorth" ||\n                                  textMapvariable.currentPoint.flag == "eastSouth"\n                              ) {\n                                  for (let i = 0; i < points.length; i++) {\n                                      if (\n                                          points[i].flag == "westNorth" ||\n                                          points[i].flag == "eastSouth"\n                                      ) {\n                                          const cartographic = ellipsoid.cartesianToCartographic(\n                                              points[i]\n                                          );\n                                          const lng = Cesium.Math.toDegrees(cartographic.longitude);\n                                          const lat = Cesium.Math.toDegrees(cartographic.latitude);\n                                          lngArr.push(lng);\n                                          latArr.push(lat);\n                                      }\n                                  }\n                              } else if (\n                                  textMapvariable.currentPoint.flag == "eastNorth" ||\n                                  textMapvariable.currentPoint.flag == "westSouth"\n                              ) {\n                                  for (var i = 0; i < points.length; i++) {\n                                      if (\n                                          points[i].flag == "eastNorth" ||\n                                          points[i].flag == "westSouth"\n                                      ) {\n                                          const cartographic = ellipsoid.cartesianToCartographic(\n                                              points[i]\n                                          );\n                                          const lng = Cesium.Math.toDegrees(cartographic.longitude);\n                                          const lat = Cesium.Math.toDegrees(cartographic.latitude);\n                                          lngArr.push(lng);\n                                          latArr.push(lat);\n                                      }\n                                  }\n                              } else if (textMapvariable.currentPoint.flag == "centerPoint") {\n                                  const cartographic = ellipsoid.cartesianToCartographic(\n                                      textMapvariable.currentPoint.position._value\n                                  );\n                                  const centerLng = Cesium.Math.toDegrees(cartographic.longitude);\n                                  const centerLat = Cesium.Math.toDegrees(cartographic.latitude);\n                                  //console.log("centerLng",centerLng);\n                                  const rectInfo = textMapvariable.gon.rectangle.coordinates.getValue();\n                                  //console.log("currentPoint.position",currentPoint.position._value);\n                                  const rectWidth =\n                                      Cesium.Math.toDegrees(rectInfo.east) -\n                                      Cesium.Math.toDegrees(rectInfo.west);\n                                  const rectHeight =\n                                      Cesium.Math.toDegrees(rectInfo.north) -\n                                      Cesium.Math.toDegrees(rectInfo.south);\n                                  //console.log("rectWidth:",rectWidth);\n                                  const rectInfoEast = centerLng + rectWidth / 2;\n                                  lngArr.push(rectInfoEast);\n                                  const rectInfoWest = centerLng - rectWidth / 2;\n                                  lngArr.push(rectInfoWest);\n                                  const rectInfoNorth = centerLat + rectHeight / 2;\n                                  latArr.push(rectInfoNorth);\n                                  const rectInfoSouth = centerLat - rectHeight / 2;\n                                  latArr.push(rectInfoSouth);\n                                  //console.log("rectInfoEast",rectInfoEast);\n                                  //console.log("经度组：",lngArr);\n                              }\n\n                              const east = Math.max.apply(null, lngArr);\n                              const west = Math.min.apply(null, lngArr);\n                              const north = Math.max.apply(null, latArr);\n                              const south = Math.min.apply(null, latArr);\n                              //更新所有编辑点的位置\n                              for (let i = 0; i < textMapvariable.pointsId.length; i++) {\n                                  let id = textMapvariable.pointsId[i];\n                                  let entityTemp = viewer.entities.getById(id);\n                                  if (\n                                      typeof entityTemp != "undefined" &&\n                                      typeof textMapvariable.currentPoint != "undefined"\n                                  ) {\n                                      if (entityTemp.flag != textMapvariable.currentPoint.flag) {\n                                          if (entityTemp.flag == "westNorth") {\n                                              entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                                  west,\n                                                  north\n                                              );\n                                          } else if (entityTemp.flag == "eastNorth") {\n                                              entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                                  east,\n                                                  north\n                                              );\n                                          } else if (entityTemp.flag == "eastSouth") {\n                                              entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                                  east,\n                                                  south\n                                              );\n                                          } else if (entityTemp.flag == "westSouth") {\n                                              entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                                  west,\n                                                  south\n                                              );\n                                          } else if (entityTemp.flag == "centerPoint") {\n                                              var centerLng = (west + east) / 2;\n                                              var centerLat = (north + south) / 2;\n                                              entityTemp.position = Cesium.Cartesian3.fromDegrees(\n                                                  centerLng,\n                                                  centerLat\n                                              );\n                                          }\n                                      }\n                                  }\n                              }\n\n                              //console.log("坐标：",west, south, east, north);\n                              if (west >= east || south >= north) {\n                                  textMapvariable.currentPoint = undefined;\n                                  return;\n                              }\n\n                              var radians = Cesium.Rectangle.fromDegrees(west, south, east, north);\n                              //更新矩形位置\n                              textMapvariable.gon.rectangle.coordinates = new Cesium.CallbackProperty(\n                                  function (time, result) {\n                                      return radians;\n                                  },\n                                  false\n                              );\n                          }\n                      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n                      // 对鼠标移动事件的监听 End\n\n                      // 对鼠标抬起事件的监听 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          // isEditting = false;\n                          textMapvariable.currentPoint = undefined;\n                      }, Cesium.ScreenSpaceEventType.LEFT_UP);\n                      // 对鼠标抬起事件的监听 End\n\n                      //鼠标右键点击 Start\n                      textMapvariable.handler.setInputAction((event) => {\n                          viewer.scene.screenSpaceCameraController.enableRotate = true;\n                          viewer.scene.screenSpaceCameraController.enableZoom = true;\n                          // if (this.handler !== null && !this.handler.isDestroyed()) {\n                          //   this.handler.destroy();\n                          // }\n                          for (let id of textMapvariable.pointsId) {\n                              viewer.entities.removeById(id);\n                          }\n                          textMapvariable.pointsId = [];\n                          textMapvariable.centerPoint = null;\n                          textMapvariable.currentPoint = null;\n\n                          var dke = textMapvariable.gon.rectangle.coordinates.getValue();\n                          console.log("修改后的面坐标(笛卡尔)：", dke);\n\n                          var east = Cesium.Math.toDegrees(dke.east);\n                          var west = Cesium.Math.toDegrees(dke.west);\n                          var north = Cesium.Math.toDegrees(dke.north);\n                          var south = Cesium.Math.toDegrees(dke.south);\n                          console.log("矩形西南东北坐标:", west, south, east, north);\n\n                          textMapvariable.gon = null;\n                          //鼠标变成默认\n                          textMapvariable.canvasDom.style.cursor = "default";\n                      }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n                      //鼠标右键点击 End\n\n                  }\n                  '},{codeLanguage:"css",content:".textMap-popup {\n                      width: 400px;\n                      position: fixed;\n                      bottom: 0;\n                      right: 0;\n                      z-index: 9;\n                      background-color: rgba(0, 0, 0, 0.5);\n                      padding: 20px;\n                  \n                      .textMap-popup-close-button {\n                          position: absolute;\n                          top: 10px;\n                          right: 10px;\n                          color: #fff !important;\n                          font-size: 18px;\n                          cursor: pointer;\n                  \n                          &:hover {\n                              opacity: 0.8;\n                          }\n                      }\n                  \n                      .tip {\n                          color: #fff;\n                          font-size: 14px;\n                      }\n                  \n                      .form-item {\n                          margin-top: 10px;\n                          display: flex;\n                          align-items: center;\n                  \n                          .label {\n                              width: 60px;\n                              color: #fff;\n                              font-size: 16px;\n                          }\n                  \n                          .value {\n                              margin-left: 10px;\n                              flex: 1;\n                  \n                              .select {\n                                  -webkit-appearance: none;\n                                  background-color: #fff;\n                                  background-image: none;\n                                  border-radius: 4px;\n                                  border: 1px solid #dcdfe6;\n                                  box-sizing: border-box;\n                                  color: #606266;\n                                  display: inline-block;\n                                  font-size: inherit;\n                                  height: 40px;\n                                  line-height: 40px;\n                                  outline: none;\n                                  transition: border-color .2s cubic-bezier(.645, .045, .355, 1);\n                                  width: 100%;\n                                  padding-left: 10px;\n                              }\n                  \n                              .text {\n                                  height: 40px;\n                                  width: 100%;\n                                  box-sizing: border-box;\n                                  padding-left: 10px;\n                                  border: 0;\n                                  background-color: #fff;\n                                  border-radius: 4px;\n                                  border: 1px solid #dcdfe6;\n                              }\n                  \n                          }\n                  \n                          button {\n                              display: inline-block;\n                              line-height: 1;\n                              white-space: nowrap;\n                              cursor: pointer;\n                              background: #fff;\n                              border: 1px solid #dcdfe6;\n                              color: #606266;\n                              -webkit-appearance: none;\n                              text-align: center;\n                              box-sizing: border-box;\n                              outline: none;\n                              margin: 0;\n                              transition: .1s;\n                              font-weight: 500;\n                              -moz-user-select: none;\n                              -webkit-user-select: none;\n                              -ms-user-select: none;\n                              padding: 12px 20px;\n                              font-size: 14px;\n                              border-radius: 4px;\n                              margin-right: 10px;\n                  \n                              &.primary {\n                                  color: #409eff;\n                                  background: #ecf5ff;\n                                  border-color: #b3d8ff;\n                              }\n                  \n                              &.warning {\n                                  color: #e6a23c;\n                                  background: #fdf6ec;\n                                  border-color: #f5dab1;\n                              }\n                          }\n                      }\n                  }"}]}],v={name:"textMapRectangle",components:{operationPanel:f},data:function(){return{viewer:null,_Entity:null,handler:null,_Canvas:null,cesiumContainer:null,rect:null,startPoint:null,rectArr:[],gon:null,pointsId:[],centerPoint:null,currentPoint:null}},created:function(){this.$store.dispatch("highlight/set_code",m)},mounted:function(){this.init()},methods:{init:function(){var e=this.cesium;e.Ion.defaultAccessToken="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNTIzZTZiYi05OWQxLTQ0OTUtYTUzNC1mYjYxNWI4OTZiZTYiLCJpZCI6OTA3MDUsImlhdCI6MTY1MDUzNDAzMn0.0f1DG8NlExZnbrueMn_AgO6GX_g_RASavpxAWcVymPs",this.viewer=new e.Viewer("cesiumContainer",{imageryProvider:new e.ArcGisMapServerImageryProvider({url:"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer"}),terrainProvider:new e.CesiumTerrainProvider({url:"http://data.marsgis.cn/terrain"}),shouldAnimate:!0,infoBox:!1,selectionIndicator:!1}),this.viewer.scene.globe.depthTestAgainstTerrain=!1,this._Entity=new l["a"](e,this.viewer),this._Canvas=new s["a"](e,this.viewer),this.cesiumContainer=document.getElementById("cesiumContainer"),this.viewer.camera.flyTo({destination:e.Cartesian3.fromDegrees(-75.59742934002912,40.03824624260394,5e3),orientation:{heading:e.Math.toRadians(0),pitch:e.Math.toRadians(-90),roll:0},duration:3})},drawStart:function(e){var n=this,t=e.color,r=e.fontSize,i=e.is_animation,a=(e.terrainValue,e.text),o=this.cesium;this.handler=new o.ScreenSpaceEventHandler(this.viewer.scene.canvas),this.cesiumContainer.style.cursor="crosshair",this.rect=null,this.viewer.scene.screenSpaceCameraController.enableRotate=!1,this.viewer.scene.screenSpaceCameraController.enableZoom=!1,this.handler.setInputAction((function(e){var t=n.viewer.camera.getPickRay(e.position),r=n.viewer.scene.globe.pick(t,n.viewer.scene);o.defined(r)&&(n.startPoint=n._Entity.createPoint({position:r,color:o.Color.CHARTREUSE.withAlpha(1),pixelSize:10,heightReference:o.HeightReference[n.terrainValue],outlineColor:o.Color.WHITE,outlineWidth:1}),n.rect=n._Entity.createRectangle({coordinates:o.Rectangle.fromCartesianArray([r,r]),material:o.Color.GREENYELLOW.withAlpha(.5),outline:!0,outlineColor:o.Color.WHITE,outlineWidth:3,heightReference:o.HeightReference[n.terrainValue]}))}),o.ScreenSpaceEventType.LEFT_DOWN),this.handler.setInputAction((function(e){if(null!=n.startPoint&&null!=n.rect){var t=n.viewer.camera.getPickRay(e.endPosition),r=n.viewer.scene.globe.pick(t,n.viewer.scene);if(r){var i=n.startPoint.position.getValue(o.JulianDate.now());n.rect.rectangle.coordinates=new o.CallbackProperty((function(e,n){return o.Rectangle.fromCartesianArray([i,r])}),!1)}}}),o.ScreenSpaceEventType.MOUSE_MOVE),this.handler.setInputAction((function(e){n.cesiumContainer.style.cursor="default",n.viewer.scene.screenSpaceCameraController.enableRotate=!0,n.viewer.scene.screenSpaceCameraController.enableZoom=!0,n.viewer.entities.remove(n.startPoint),n.handler.removeInputAction(o.ScreenSpaceEventType.LEFT_DOWN),n.handler.removeInputAction(o.ScreenSpaceEventType.MOUSE_MOVE),n.handler.removeInputAction(o.ScreenSpaceEventType.LEFT_UP),n.rect.rectangle.outline=!1;var s=n._Canvas.drawText({text:a,color:t,fontSize:r});if(n.rect.rectangle.material=new o.ImageMaterialProperty({image:s,repeat:new o.Cartesian2(1,1),transparent:!0,color:o.Color.WHITE}),i){var l=function(){return c+=.005};n.viewer.scene.globe.depthTestAgainstTerrain=!1;var c=o.Math.toRadians(30);n.rect.rectangle.rotation=new o.CallbackProperty(l,!1),n.rect.rectangle.stRotation=new o.CallbackProperty(l,!1)}n.rectArr.push(n.rect);var u=n.rect.rectangle.coordinates.getValue();console.log("修改后的面坐标(笛卡尔)：",u);var h=o.Math.toDegrees(u.east),p=o.Math.toDegrees(u.west),d=o.Math.toDegrees(u.north),g=o.Math.toDegrees(u.south);console.log("矩形西南东北坐标:",p,g,h,d)}),o.ScreenSpaceEventType.LEFT_UP)},editRect:function(){var e=this,n=this.cesium,t=!1;this.cesiumContainer.style.cursor="pointer",this.viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(n.ScreenSpaceEventType.LEFT_DOUBLE_CLICK),this.handler.setInputAction((function(r){var i=r.position,a=e.viewer.scene.pick(i);if(n.defined(a)){var o=a.id,s=e.rectArr.filter((function(e){return e.id==o.id}));if(0==s.length||t)"rect_point"===o.name&&(e.currentPoint=o);else{e.gon=o;var l=e.gon.rectangle.coordinates.getValue(),c=[],u=n.Cartesian3.fromRadians(l.west,l.north);u.flag="westNorth",c.push(u);var h=n.Cartesian3.fromRadians(l.east,l.north);h.flag="eastNorth",c.push(h);var p=n.Cartesian3.fromRadians(l.east,l.south);p.flag="eastSouth",c.push(p);var d=n.Cartesian3.fromRadians(l.west,l.south);d.flag="westSouth",c.push(d),c.map((function(t,r){var i=e._Entity.createPoint({id:"Point-".concat((new Date).getTime(),"-index-").concat(r),name:"rect_point",position:t,color:n.Color.CHARTREUSE.withAlpha(1),pixelSize:10,heightReference:n.HeightReference.CLAMP_TO_GROUND,outlineColor:n.Color.WHITE,outlineWidth:1});i.flag=t.flag,e.pointsId.push(i.id)}));var g=(l.west+l.east)/2,f=(l.north+l.south)/2,m=n.Cartesian3.fromRadians(g,f),v=e._Entity.createPoint({id:"centerPoint-".concat((new Date).getTime()),name:"rect_point",position:m,color:n.Color.RED,pixelSize:10,outlineColor:n.Color.BLACK,outlineWidth:1,heightReference:n.HeightReference.CLAMP_TO_GROUND});v.flag="centerPoint",e.pointsId.push(v.id),t=!0,e.viewer.scene.screenSpaceCameraController.enableRotate=!1,e.viewer.scene.screenSpaceCameraController.enableZoom=!1}}}),n.ScreenSpaceEventType.LEFT_DOWN),this.handler.setInputAction((function(r){if(t&&e.currentPoint&&"rect_point"==e.currentPoint.name){var i=e.viewer.camera.getPickRay(r.endPosition),a=e.viewer.scene.globe.pick(i,e.viewer.scene),o=[];if(!a)return;e.currentPoint.position=a;for(var s=0;s<e.pointsId.length;s++)if(e.currentPoint.id==e.pointsId[s]){var l=e.currentPoint.position._value;l.flag=e.currentPoint.flag,o.push(l)}else{var c=e.pointsId[s];l=e.viewer.entities.getById(c).position._value;l.flag=e.viewer.entities.getById(c).flag,o.push(l)}if("undefined"==typeof e.currentPoint){var u=n.Rectangle.fromDegrees(D,L,R,k);return u}var h=e.viewer.scene.globe.ellipsoid,p=[],d=[];if("westNorth"==e.currentPoint.flag||"eastSouth"==e.currentPoint.flag){for(var g=0;g<o.length;g++)if("westNorth"==o[g].flag||"eastSouth"==o[g].flag){var f=h.cartesianToCartographic(o[g]),m=n.Math.toDegrees(f.longitude),v=n.Math.toDegrees(f.latitude);p.push(m),d.push(v)}}else if("eastNorth"==e.currentPoint.flag||"westSouth"==e.currentPoint.flag){for(s=0;s<o.length;s++)if("eastNorth"==o[s].flag||"westSouth"==o[s].flag){var C=h.cartesianToCartographic(o[s]),w=n.Math.toDegrees(C.longitude),b=n.Math.toDegrees(C.latitude);p.push(w),d.push(b)}}else if("centerPoint"==e.currentPoint.flag){var y=h.cartesianToCartographic(e.currentPoint.position._value),S=n.Math.toDegrees(y.longitude),M=n.Math.toDegrees(y.latitude),E=e.gon.rectangle.coordinates.getValue(),x=n.Math.toDegrees(E.east)-n.Math.toDegrees(E.west),P=n.Math.toDegrees(E.north)-n.Math.toDegrees(E.south),T=S+x/2;p.push(T);var I=S-x/2;p.push(I);var A=M+P/2;d.push(A);var _=M-P/2;d.push(_)}for(var R=Math.max.apply(null,p),D=Math.min.apply(null,p),k=Math.max.apply(null,d),L=Math.min.apply(null,d),O=0;O<e.pointsId.length;O++){var N=e.pointsId[O],W=e.viewer.entities.getById(N);if("undefined"!=typeof W&&"undefined"!=typeof e.currentPoint&&W.flag!=e.currentPoint.flag)if("westNorth"==W.flag)W.position=n.Cartesian3.fromDegrees(D,k);else if("eastNorth"==W.flag)W.position=n.Cartesian3.fromDegrees(R,k);else if("eastSouth"==W.flag)W.position=n.Cartesian3.fromDegrees(R,L);else if("westSouth"==W.flag)W.position=n.Cartesian3.fromDegrees(D,L);else if("centerPoint"==W.flag){var V=(D+R)/2,U=(k+L)/2;W.position=n.Cartesian3.fromDegrees(V,U)}}if(D>=R||L>=k)return void(e.currentPoint=void 0);u=n.Rectangle.fromDegrees(D,L,R,k);e.gon.rectangle.coordinates=new n.CallbackProperty((function(e,n){return u}),!1)}}),n.ScreenSpaceEventType.MOUSE_MOVE),this.handler.setInputAction((function(n){e.currentPoint=void 0}),n.ScreenSpaceEventType.LEFT_UP),this.handler.setInputAction((function(t){e.viewer.scene.screenSpaceCameraController.enableRotate=!0,e.viewer.scene.screenSpaceCameraController.enableZoom=!0;var r,i=o(e.pointsId);try{for(i.s();!(r=i.n()).done;){var a=r.value;e.viewer.entities.removeById(a)}}catch(p){i.e(p)}finally{i.f()}e.pointsId=[],e.centerPoint=null,e.currentPoint=null;var s=e.gon.rectangle.coordinates.getValue();console.log("修改后的面坐标(笛卡尔)：",s);var l=n.Math.toDegrees(s.east),c=n.Math.toDegrees(s.west),u=n.Math.toDegrees(s.north),h=n.Math.toDegrees(s.south);console.log("矩形西南东北坐标:",c,h,l,u),e.gon=null,e.cesiumContainer.style.cursor="default"}),n.ScreenSpaceEventType.RIGHT_CLICK)}}},C=v,w=(t("acbc"),Object(d["a"])(C,r,i,!1,null,"4831905e",null));n["default"]=w.exports},"2a3c":function(e,n,t){"use strict";function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}t.d(n,"a",(function(){return r}))},"4bb1":function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));t("a567");function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}},"78be":function(e,n,t){var r=t("46a7"),i=t("bc35"),a=t("5386");r({target:"Array",proto:!0},{fill:i}),a("fill")},"88fb":function(e,n,t){},"980d":function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t("5f07"),t("eb3b"),t("e72f"),t("9eca"),t("c508"),t("f8c7"),t("e226");var r=t("2a3c");function i(e,n){if(e){if("string"===typeof e)return Object(r["a"])(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r["a"])(e,n):void 0}}},a1a0:function(e,n,t){},acbc:function(e,n,t){"use strict";t("a1a0")},bc35:function(e,n,t){"use strict";var r=t("735b"),i=t("32da"),a=t("1c60");e.exports=function(e){var n=r(this),t=a(n),o=arguments.length,s=i(o>1?arguments[1]:void 0,t),l=o>2?arguments[2]:void 0,c=void 0===l?t:i(l,t);while(c>s)n[s++]=e;return n}},dd8c:function(e,n,t){"use strict";var r=t("26b6"),i=t("76eb"),a=t("4bb1"),o=t("e143"),s=(t("eb3b"),function(){function e(n,t){Object(a["a"])(this,e),this.Cesium=n,this.viewer=t}return Object(o["a"])(e,[{key:"drawText",value:function(e){var n=e.text,t=document.createElement("canvas"),r=(n+"").length*e.fontSize;t.width=r,t.height=e.fontSize;var i=t.getContext("2d");return i.fillStyle=e.color,i.font="bold "+e.fontSize+"px 微软雅黑",i.textBaseline="hanging",i.fillText(n,0,0),t}},{key:"drawImageText",value:function(){var e=Object(i["a"])(Object(r["a"])().mark((function e(n){return Object(r["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,new Promise((function(e,t){var r,i=document.createElement("img");i.src=n.src,i.onload=function(){r=document.createElement("canvas"),r.height=n.height,r.width=n.width;var t=r.getContext("2d");t.clearRect(0,0,r.width,r.height),t.drawImage(i,0,0),t.font="30px bold 楷体",t.fillStyle="#fff";var a="阳性："+n.data.num;t.fillText(a,(r.width-30*a.length)/2,(r.height+30)/2),e(r)}}));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));function n(n){return e.apply(this,arguments)}return n}()},{key:"combineIconAndLabel",value:function(e){var n=e.url,t=e.label,r=e.size,i=this.Cesium,a=document.createElement("canvas");a.width=r,a.height=r;var o=a.getContext("2d"),s=new i.Resource.fetchImage(n).then((function(e){try{o.drawImage(e,0,0)}catch(n){console.log(n)}return o.fillStyle=i.Color.WHITE.toCssColorString(),o.font="bold 20px Microsoft YaHei",o.textAlign="center",o.textBaseline="middle",o.fillText(t,r/2,r/2),a}));return s}}]),e}());n["a"]=s},e143:function(e,n,t){"use strict";function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,n,t){return n&&r(e.prototype,n),t&&r(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}t.d(n,"a",(function(){return i}))},fe41:function(e,n,t){"use strict";t("88fb")}}]);